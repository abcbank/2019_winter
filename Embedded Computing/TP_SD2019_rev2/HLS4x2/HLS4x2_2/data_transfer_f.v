// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module data_transfer_f (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fmap_TDATA,
        fmap_TVALID,
        fmap_TREADY,
        W_BRAM_0_0_address0,
        W_BRAM_0_0_ce0,
        W_BRAM_0_0_we0,
        W_BRAM_0_0_d0,
        W_BRAM_0_1_address0,
        W_BRAM_0_1_ce0,
        W_BRAM_0_1_we0,
        W_BRAM_0_1_d0,
        W_BRAM_0_2_address0,
        W_BRAM_0_2_ce0,
        W_BRAM_0_2_we0,
        W_BRAM_0_2_d0,
        W_BRAM_0_3_address0,
        W_BRAM_0_3_ce0,
        W_BRAM_0_3_we0,
        W_BRAM_0_3_d0,
        W_BRAM_1_0_address0,
        W_BRAM_1_0_ce0,
        W_BRAM_1_0_we0,
        W_BRAM_1_0_d0,
        W_BRAM_1_1_address0,
        W_BRAM_1_1_ce0,
        W_BRAM_1_1_we0,
        W_BRAM_1_1_d0,
        W_BRAM_1_2_address0,
        W_BRAM_1_2_ce0,
        W_BRAM_1_2_we0,
        W_BRAM_1_2_d0,
        W_BRAM_1_3_address0,
        W_BRAM_1_3_ce0,
        W_BRAM_1_3_we0,
        W_BRAM_1_3_d0,
        m,
        c
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] fmap_TDATA;
input   fmap_TVALID;
output   fmap_TREADY;
output  [4:0] W_BRAM_0_0_address0;
output   W_BRAM_0_0_ce0;
output   W_BRAM_0_0_we0;
output  [15:0] W_BRAM_0_0_d0;
output  [4:0] W_BRAM_0_1_address0;
output   W_BRAM_0_1_ce0;
output   W_BRAM_0_1_we0;
output  [15:0] W_BRAM_0_1_d0;
output  [4:0] W_BRAM_0_2_address0;
output   W_BRAM_0_2_ce0;
output   W_BRAM_0_2_we0;
output  [15:0] W_BRAM_0_2_d0;
output  [4:0] W_BRAM_0_3_address0;
output   W_BRAM_0_3_ce0;
output   W_BRAM_0_3_we0;
output  [15:0] W_BRAM_0_3_d0;
output  [4:0] W_BRAM_1_0_address0;
output   W_BRAM_1_0_ce0;
output   W_BRAM_1_0_we0;
output  [15:0] W_BRAM_1_0_d0;
output  [4:0] W_BRAM_1_1_address0;
output   W_BRAM_1_1_ce0;
output   W_BRAM_1_1_we0;
output  [15:0] W_BRAM_1_1_d0;
output  [4:0] W_BRAM_1_2_address0;
output   W_BRAM_1_2_ce0;
output   W_BRAM_1_2_we0;
output  [15:0] W_BRAM_1_2_d0;
output  [4:0] W_BRAM_1_3_address0;
output   W_BRAM_1_3_ce0;
output   W_BRAM_1_3_we0;
output  [15:0] W_BRAM_1_3_d0;
input  [7:0] m;
input  [6:0] c;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fmap_TREADY;
reg W_BRAM_0_0_ce0;
reg W_BRAM_0_0_we0;
reg W_BRAM_0_1_ce0;
reg W_BRAM_0_1_we0;
reg W_BRAM_0_2_ce0;
reg W_BRAM_0_2_we0;
reg W_BRAM_0_3_ce0;
reg W_BRAM_0_3_we0;
reg W_BRAM_1_0_ce0;
reg W_BRAM_1_0_we0;
reg W_BRAM_1_1_ce0;
reg W_BRAM_1_1_we0;
reg W_BRAM_1_2_ce0;
reg W_BRAM_1_2_we0;
reg W_BRAM_1_3_ce0;
reg W_BRAM_1_3_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fmap_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] exitcond_flatten2_fu_363_p2;
reg   [68:0] indvar_flatten2_reg_192;
reg   [31:0] i1_reg_203;
reg   [36:0] indvar_flatten_reg_212;
reg   [31:0] j1_reg_223;
reg   [4:0] k1_reg_232;
wire   [1:0] tmp_28_fu_247_p1;
reg   [1:0] tmp_28_reg_512;
wire   [6:0] tmp_8_fu_275_p2;
reg   [6:0] tmp_8_reg_518;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_27_fu_291_p1;
reg   [0:0] tmp_27_reg_528;
wire   [36:0] bound_fu_302_p2;
reg   [36:0] bound_reg_533;
wire   [8:0] tmp_10_fu_326_p2;
reg   [8:0] tmp_10_reg_539;
wire   [31:0] c_cast2_fu_332_p1;
reg   [31:0] c_cast2_reg_544;
wire    ap_CS_fsm_state3;
wire   [31:0] m_cast1_fu_335_p1;
wire   [68:0] bound7_fu_348_p2;
reg   [68:0] bound7_reg_555;
wire   [1:0] tmp_35_t_fu_358_p2;
reg   [1:0] tmp_35_t_reg_560;
reg    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten2_reg_565;
wire   [68:0] indvar_flatten_next2_fu_368_p2;
wire   [0:0] exitcond_flatten_fu_380_p2;
reg   [0:0] exitcond_flatten_reg_574;
wire   [31:0] tmp_31_t_mid2_v_v_fu_392_p3;
reg   [31:0] tmp_31_t_mid2_v_v_reg_579;
wire   [0:0] tmp_31_t_mid2_fu_404_p2;
reg   [0:0] tmp_31_t_mid2_reg_584;
wire   [0:0] exitcond_mid_fu_421_p2;
reg   [0:0] exitcond_mid_reg_588;
wire   [4:0] k1_mid2_fu_439_p3;
reg   [4:0] k1_mid2_reg_593;
wire   [1:0] tmp_35_t_mid1_fu_451_p2;
reg   [1:0] tmp_35_t_mid1_reg_598;
wire   [31:0] j1_mid2_fu_456_p3;
reg   [15:0] fmap_read_reg_608;
wire   [4:0] k1_1_fu_464_p2;
wire   [36:0] indvar_flatten_next_fu_476_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
reg   [31:0] ap_phi_mux_i1_phi_fu_206_p4;
wire   [63:0] tmp_3_fu_496_p1;
wire   [1:0] tmp_35_t_mid2_fu_490_p3;
wire   [5:0] tmp_26_fu_243_p1;
wire   [5:0] tmp_s_fu_251_p2;
wire   [0:0] tmp_7_fu_257_p2;
wire   [5:0] smax1_fu_263_p3;
wire   [6:0] smax1_cast_fu_271_p1;
wire  signed [31:0] tmp_22_cast_fu_295_p1;
wire   [31:0] bound_fu_302_p1;
wire   [7:0] tmp_fu_285_p2;
wire   [0:0] tmp_9_fu_308_p2;
wire   [7:0] smax4_fu_314_p3;
wire   [8:0] smax4_cast_fu_322_p1;
wire   [8:0] m_cast1_cast_fu_281_p1;
wire  signed [31:0] tmp_24_cast_fu_338_p1;
wire   [31:0] bound7_fu_348_p0;
wire   [36:0] bound7_fu_348_p1;
wire   [1:0] tmp_29_fu_354_p1;
wire   [31:0] i1_1_fu_374_p2;
wire   [0:0] tmp_30_fu_400_p1;
wire   [0:0] exitcond_fu_415_p2;
wire   [0:0] not_exitcond_flatten_fu_409_p2;
wire   [31:0] j1_mid_fu_385_p3;
wire   [0:0] tmp_11_fu_433_p2;
wire   [31:0] j1_1_fu_427_p2;
wire   [1:0] tmp_31_fu_447_p1;
wire   [36:0] indvar_flatten_op_fu_470_p2;
wire   [1:0] tmp_35_t_mid_fu_484_p3;
wire    ap_CS_fsm_state6;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [68:0] bound7_fu_348_p00;
wire   [68:0] bound7_fu_348_p10;
wire   [36:0] bound_fu_302_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_reg_565 == 1'd0))) begin
        i1_reg_203 <= tmp_31_t_mid2_v_v_reg_579;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i1_reg_203 <= m_cast1_fu_335_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_fu_363_p2 == 1'd0))) begin
        indvar_flatten2_reg_192 <= indvar_flatten_next2_fu_368_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten2_reg_192 <= 69'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_fu_363_p2 == 1'd0))) begin
        indvar_flatten_reg_212 <= indvar_flatten_next_fu_476_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_212 <= 37'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_fu_363_p2 == 1'd0))) begin
        j1_reg_223 <= j1_mid2_fu_456_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j1_reg_223 <= c_cast2_fu_332_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_fu_363_p2 == 1'd0))) begin
        k1_reg_232 <= k1_1_fu_464_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        k1_reg_232 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bound7_reg_555 <= bound7_fu_348_p2;
        c_cast2_reg_544[6 : 0] <= c_cast2_fu_332_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_533 <= bound_fu_302_p2;
        tmp_10_reg_539 <= tmp_10_fu_326_p2;
        tmp_27_reg_528 <= tmp_27_fu_291_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten2_reg_565 <= exitcond_flatten2_fu_363_p2;
        tmp_35_t_reg_560 <= tmp_35_t_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_fu_363_p2 == 1'd0))) begin
        exitcond_flatten_reg_574 <= exitcond_flatten_fu_380_p2;
        exitcond_mid_reg_588 <= exitcond_mid_fu_421_p2;
        fmap_read_reg_608 <= fmap_TDATA;
        k1_mid2_reg_593 <= k1_mid2_fu_439_p3;
        tmp_31_t_mid2_reg_584 <= tmp_31_t_mid2_fu_404_p2;
        tmp_35_t_mid1_reg_598 <= tmp_35_t_mid1_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_28_reg_512 <= tmp_28_fu_247_p1;
        tmp_8_reg_518 <= tmp_8_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_fu_363_p2 == 1'd0))) begin
        tmp_31_t_mid2_v_v_reg_579 <= tmp_31_t_mid2_v_v_fu_392_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        W_BRAM_0_0_ce0 = 1'b1;
    end else begin
        W_BRAM_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_35_t_mid2_fu_490_p3 == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_31_t_mid2_reg_584 == 1'd0))) begin
        W_BRAM_0_0_we0 = 1'b1;
    end else begin
        W_BRAM_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        W_BRAM_0_1_ce0 = 1'b1;
    end else begin
        W_BRAM_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_35_t_mid2_fu_490_p3 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_31_t_mid2_reg_584 == 1'd0))) begin
        W_BRAM_0_1_we0 = 1'b1;
    end else begin
        W_BRAM_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        W_BRAM_0_2_ce0 = 1'b1;
    end else begin
        W_BRAM_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_35_t_mid2_fu_490_p3 == 2'd2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_31_t_mid2_reg_584 == 1'd0))) begin
        W_BRAM_0_2_we0 = 1'b1;
    end else begin
        W_BRAM_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        W_BRAM_0_3_ce0 = 1'b1;
    end else begin
        W_BRAM_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_35_t_mid2_fu_490_p3 == 2'd3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_31_t_mid2_reg_584 == 1'd0))) begin
        W_BRAM_0_3_we0 = 1'b1;
    end else begin
        W_BRAM_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        W_BRAM_1_0_ce0 = 1'b1;
    end else begin
        W_BRAM_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_35_t_mid2_fu_490_p3 == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_31_t_mid2_reg_584 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        W_BRAM_1_0_we0 = 1'b1;
    end else begin
        W_BRAM_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        W_BRAM_1_1_ce0 = 1'b1;
    end else begin
        W_BRAM_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_35_t_mid2_fu_490_p3 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_31_t_mid2_reg_584 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        W_BRAM_1_1_we0 = 1'b1;
    end else begin
        W_BRAM_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        W_BRAM_1_2_ce0 = 1'b1;
    end else begin
        W_BRAM_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_35_t_mid2_fu_490_p3 == 2'd2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_31_t_mid2_reg_584 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        W_BRAM_1_2_we0 = 1'b1;
    end else begin
        W_BRAM_1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        W_BRAM_1_3_ce0 = 1'b1;
    end else begin
        W_BRAM_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_35_t_mid2_fu_490_p3 == 2'd3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_31_t_mid2_reg_584 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        W_BRAM_1_3_we0 = 1'b1;
    end else begin
        W_BRAM_1_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten2_fu_363_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_flatten2_reg_565 == 1'd0))) begin
        ap_phi_mux_i1_phi_fu_206_p4 = tmp_31_t_mid2_v_v_reg_579;
    end else begin
        ap_phi_mux_i1_phi_fu_206_p4 = i1_reg_203;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten2_fu_363_p2 == 1'd0))) begin
        fmap_TDATA_blk_n = fmap_TVALID;
    end else begin
        fmap_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten2_fu_363_p2 == 1'd0))) begin
        fmap_TREADY = 1'b1;
    end else begin
        fmap_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten2_fu_363_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten2_fu_363_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W_BRAM_0_0_address0 = tmp_3_fu_496_p1;

assign W_BRAM_0_0_d0 = fmap_read_reg_608;

assign W_BRAM_0_1_address0 = tmp_3_fu_496_p1;

assign W_BRAM_0_1_d0 = fmap_read_reg_608;

assign W_BRAM_0_2_address0 = tmp_3_fu_496_p1;

assign W_BRAM_0_2_d0 = fmap_read_reg_608;

assign W_BRAM_0_3_address0 = tmp_3_fu_496_p1;

assign W_BRAM_0_3_d0 = fmap_read_reg_608;

assign W_BRAM_1_0_address0 = tmp_3_fu_496_p1;

assign W_BRAM_1_0_d0 = fmap_read_reg_608;

assign W_BRAM_1_1_address0 = tmp_3_fu_496_p1;

assign W_BRAM_1_1_d0 = fmap_read_reg_608;

assign W_BRAM_1_2_address0 = tmp_3_fu_496_p1;

assign W_BRAM_1_2_d0 = fmap_read_reg_608;

assign W_BRAM_1_3_address0 = tmp_3_fu_496_p1;

assign W_BRAM_1_3_d0 = fmap_read_reg_608;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((fmap_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten2_fu_363_p2 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((fmap_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten2_fu_363_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter0 = ((fmap_TVALID == 1'b0) & (exitcond_flatten2_fu_363_p2 == 1'd0));
end

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound7_fu_348_p0 = bound7_fu_348_p00;

assign bound7_fu_348_p00 = $unsigned(tmp_24_cast_fu_338_p1);

assign bound7_fu_348_p1 = bound7_fu_348_p10;

assign bound7_fu_348_p10 = bound_reg_533;

assign bound7_fu_348_p2 = (bound7_fu_348_p0 * bound7_fu_348_p1);

assign bound_fu_302_p1 = bound_fu_302_p10;

assign bound_fu_302_p10 = $unsigned(tmp_22_cast_fu_295_p1);

assign bound_fu_302_p2 = (37'd25 * bound_fu_302_p1);

assign c_cast2_fu_332_p1 = c;

assign exitcond_flatten2_fu_363_p2 = ((indvar_flatten2_reg_192 == bound7_reg_555) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_380_p2 = ((indvar_flatten_reg_212 == bound_reg_533) ? 1'b1 : 1'b0);

assign exitcond_fu_415_p2 = ((k1_reg_232 == 5'd25) ? 1'b1 : 1'b0);

assign exitcond_mid_fu_421_p2 = (not_exitcond_flatten_fu_409_p2 & exitcond_fu_415_p2);

assign i1_1_fu_374_p2 = (32'd1 + ap_phi_mux_i1_phi_fu_206_p4);

assign indvar_flatten_next2_fu_368_p2 = (69'd1 + indvar_flatten2_reg_192);

assign indvar_flatten_next_fu_476_p3 = ((exitcond_flatten_fu_380_p2[0:0] === 1'b1) ? 37'd1 : indvar_flatten_op_fu_470_p2);

assign indvar_flatten_op_fu_470_p2 = (indvar_flatten_reg_212 + 37'd1);

assign j1_1_fu_427_p2 = (32'd1 + j1_mid_fu_385_p3);

assign j1_mid2_fu_456_p3 = ((exitcond_mid_fu_421_p2[0:0] === 1'b1) ? j1_1_fu_427_p2 : j1_mid_fu_385_p3);

assign j1_mid_fu_385_p3 = ((exitcond_flatten_fu_380_p2[0:0] === 1'b1) ? c_cast2_reg_544 : j1_reg_223);

assign k1_1_fu_464_p2 = (k1_mid2_fu_439_p3 + 5'd1);

assign k1_mid2_fu_439_p3 = ((tmp_11_fu_433_p2[0:0] === 1'b1) ? 5'd0 : k1_reg_232);

assign m_cast1_cast_fu_281_p1 = m;

assign m_cast1_fu_335_p1 = m;

assign not_exitcond_flatten_fu_409_p2 = (exitcond_flatten_fu_380_p2 ^ 1'd1);

assign smax1_cast_fu_271_p1 = smax1_fu_263_p3;

assign smax1_fu_263_p3 = ((tmp_7_fu_257_p2[0:0] === 1'b1) ? tmp_26_fu_243_p1 : tmp_s_fu_251_p2);

assign smax4_cast_fu_322_p1 = smax4_fu_314_p3;

assign smax4_fu_314_p3 = ((tmp_9_fu_308_p2[0:0] === 1'b1) ? m : tmp_fu_285_p2);

assign tmp_10_fu_326_p2 = (smax4_cast_fu_322_p1 - m_cast1_cast_fu_281_p1);

assign tmp_11_fu_433_p2 = (exitcond_mid_fu_421_p2 | exitcond_flatten_fu_380_p2);

assign tmp_22_cast_fu_295_p1 = $signed(tmp_8_reg_518);

assign tmp_24_cast_fu_338_p1 = $signed(tmp_10_reg_539);

assign tmp_26_fu_243_p1 = c[5:0];

assign tmp_27_fu_291_p1 = m[0:0];

assign tmp_28_fu_247_p1 = c[1:0];

assign tmp_29_fu_354_p1 = j1_reg_223[1:0];

assign tmp_30_fu_400_p1 = tmp_31_t_mid2_v_v_fu_392_p3[0:0];

assign tmp_31_fu_447_p1 = j1_1_fu_427_p2[1:0];

assign tmp_31_t_mid2_fu_404_p2 = (tmp_30_fu_400_p1 ^ tmp_27_reg_528);

assign tmp_31_t_mid2_v_v_fu_392_p3 = ((exitcond_flatten_fu_380_p2[0:0] === 1'b1) ? i1_1_fu_374_p2 : ap_phi_mux_i1_phi_fu_206_p4);

assign tmp_35_t_fu_358_p2 = (tmp_29_fu_354_p1 - tmp_28_reg_512);

assign tmp_35_t_mid1_fu_451_p2 = (tmp_31_fu_447_p1 - tmp_28_reg_512);

assign tmp_35_t_mid2_fu_490_p3 = ((exitcond_mid_reg_588[0:0] === 1'b1) ? tmp_35_t_mid1_reg_598 : tmp_35_t_mid_fu_484_p3);

assign tmp_35_t_mid_fu_484_p3 = ((exitcond_flatten_reg_574[0:0] === 1'b1) ? 2'd0 : tmp_35_t_reg_560);

assign tmp_3_fu_496_p1 = k1_mid2_reg_593;

assign tmp_7_fu_257_p2 = ((tmp_26_fu_243_p1 > tmp_s_fu_251_p2) ? 1'b1 : 1'b0);

assign tmp_8_fu_275_p2 = (smax1_cast_fu_271_p1 - c);

assign tmp_9_fu_308_p2 = ((m > tmp_fu_285_p2) ? 1'b1 : 1'b0);

assign tmp_fu_285_p2 = (8'd2 + m);

assign tmp_s_fu_251_p2 = (6'd4 + tmp_26_fu_243_p1);

always @ (posedge ap_clk) begin
    c_cast2_reg_544[31:7] <= 25'b0000000000000000000000000;
end

endmodule //data_transfer_f
