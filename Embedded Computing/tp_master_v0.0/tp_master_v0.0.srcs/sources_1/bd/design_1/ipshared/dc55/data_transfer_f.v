// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module data_transfer_f (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fmap_TDATA,
        fmap_TVALID,
        fmap_TREADY,
        W_BRAM_0_0_address0,
        W_BRAM_0_0_ce0,
        W_BRAM_0_0_we0,
        W_BRAM_0_0_d0,
        W_BRAM_0_1_address0,
        W_BRAM_0_1_ce0,
        W_BRAM_0_1_we0,
        W_BRAM_0_1_d0,
        W_BRAM_1_0_address0,
        W_BRAM_1_0_ce0,
        W_BRAM_1_0_we0,
        W_BRAM_1_0_d0,
        W_BRAM_1_1_address0,
        W_BRAM_1_1_ce0,
        W_BRAM_1_1_we0,
        W_BRAM_1_1_d0,
        W_BRAM_2_0_address0,
        W_BRAM_2_0_ce0,
        W_BRAM_2_0_we0,
        W_BRAM_2_0_d0,
        W_BRAM_2_1_address0,
        W_BRAM_2_1_ce0,
        W_BRAM_2_1_we0,
        W_BRAM_2_1_d0,
        W_BRAM_3_0_address0,
        W_BRAM_3_0_ce0,
        W_BRAM_3_0_we0,
        W_BRAM_3_0_d0,
        W_BRAM_3_1_address0,
        W_BRAM_3_1_ce0,
        W_BRAM_3_1_we0,
        W_BRAM_3_1_d0,
        m,
        c
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] fmap_TDATA;
input   fmap_TVALID;
output   fmap_TREADY;
output  [3:0] W_BRAM_0_0_address0;
output   W_BRAM_0_0_ce0;
output   W_BRAM_0_0_we0;
output  [15:0] W_BRAM_0_0_d0;
output  [3:0] W_BRAM_0_1_address0;
output   W_BRAM_0_1_ce0;
output   W_BRAM_0_1_we0;
output  [15:0] W_BRAM_0_1_d0;
output  [3:0] W_BRAM_1_0_address0;
output   W_BRAM_1_0_ce0;
output   W_BRAM_1_0_we0;
output  [15:0] W_BRAM_1_0_d0;
output  [3:0] W_BRAM_1_1_address0;
output   W_BRAM_1_1_ce0;
output   W_BRAM_1_1_we0;
output  [15:0] W_BRAM_1_1_d0;
output  [3:0] W_BRAM_2_0_address0;
output   W_BRAM_2_0_ce0;
output   W_BRAM_2_0_we0;
output  [15:0] W_BRAM_2_0_d0;
output  [3:0] W_BRAM_2_1_address0;
output   W_BRAM_2_1_ce0;
output   W_BRAM_2_1_we0;
output  [15:0] W_BRAM_2_1_d0;
output  [3:0] W_BRAM_3_0_address0;
output   W_BRAM_3_0_ce0;
output   W_BRAM_3_0_we0;
output  [15:0] W_BRAM_3_0_d0;
output  [3:0] W_BRAM_3_1_address0;
output   W_BRAM_3_1_ce0;
output   W_BRAM_3_1_we0;
output  [15:0] W_BRAM_3_1_d0;
input  [6:0] m;
input  [8:0] c;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fmap_TREADY;
reg W_BRAM_0_0_ce0;
reg W_BRAM_0_0_we0;
reg W_BRAM_0_1_ce0;
reg W_BRAM_0_1_we0;
reg W_BRAM_1_0_ce0;
reg W_BRAM_1_0_we0;
reg W_BRAM_1_1_ce0;
reg W_BRAM_1_1_we0;
reg W_BRAM_2_0_ce0;
reg W_BRAM_2_0_we0;
reg W_BRAM_2_1_ce0;
reg W_BRAM_2_1_we0;
reg W_BRAM_3_0_ce0;
reg W_BRAM_3_0_we0;
reg W_BRAM_3_1_ce0;
reg W_BRAM_3_1_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fmap_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_flatten2_fu_381_p2;
wire   [1:0] tmp_29_fu_267_p1;
reg   [1:0] tmp_29_reg_543;
wire   [0:0] tmp_30_fu_271_p1;
reg   [0:0] tmp_30_reg_548;
wire   [35:0] bound_fu_329_p2;
reg   [35:0] bound_reg_554;
wire   [6:0] tmp_11_fu_353_p2;
reg   [6:0] tmp_11_reg_560;
wire   [31:0] c_cast2_fu_359_p1;
reg   [31:0] c_cast2_reg_565;
wire    ap_CS_fsm_state2;
wire   [31:0] m_cast1_fu_362_p1;
wire   [67:0] bound7_fu_375_p2;
reg   [67:0] bound7_reg_576;
wire   [67:0] indvar_flatten_next2_fu_386_p2;
reg    ap_block_state3;
wire   [31:0] tmp_31_t_mid2_v_v_fu_410_p3;
wire   [31:0] j1_mid2_fu_493_p3;
wire   [3:0] k1_1_fu_513_p2;
wire   [35:0] indvar_flatten_next_fu_525_p3;
reg   [67:0] indvar_flatten2_reg_202;
reg   [31:0] i1_reg_213;
reg   [35:0] indvar_flatten_reg_222;
reg   [31:0] j1_reg_233;
reg   [3:0] k1_reg_242;
wire   [63:0] tmp_2_fu_501_p1;
wire   [1:0] tmp_31_t_mid2_fu_422_p2;
wire   [0:0] tmp_35_t_mid2_fu_488_p2;
wire   [5:0] tmp_28_fu_257_p1;
wire   [7:0] tmp_27_fu_253_p1;
wire   [7:0] tmp_s_fu_275_p2;
wire   [0:0] tmp_7_fu_281_p2;
wire   [7:0] smax1_fu_287_p3;
wire   [8:0] smax1_cast_fu_295_p1;
wire   [8:0] tmp_8_fu_299_p2;
wire  signed [31:0] tmp_22_cast_fu_305_p1;
wire   [11:0] tmp_31_fu_313_p3;
wire  signed [34:0] tmp_9_fu_321_p1;
wire   [35:0] cast_fu_309_p1;
wire   [35:0] p_shl_fu_325_p1;
wire   [5:0] tmp_fu_261_p2;
wire   [0:0] tmp_10_fu_335_p2;
wire   [5:0] smax4_fu_341_p3;
wire   [6:0] smax4_cast_fu_349_p1;
wire  signed [31:0] tmp_25_cast_fu_365_p1;
wire   [31:0] bound7_fu_375_p0;
wire   [35:0] bound7_fu_375_p1;
wire   [0:0] exitcond_flatten_fu_398_p2;
wire   [31:0] i1_1_fu_392_p2;
wire   [1:0] tmp_32_fu_418_p1;
wire   [0:0] tmp_33_fu_427_p1;
wire   [0:0] exitcond_fu_444_p2;
wire   [0:0] not_exitcond_flatten_fu_438_p2;
wire   [31:0] j1_mid_fu_403_p3;
wire   [0:0] exitcond_mid_fu_450_p2;
wire   [0:0] tmp_12_fu_462_p2;
wire   [31:0] j1_1_fu_456_p2;
wire   [0:0] tmp_34_fu_476_p1;
wire   [0:0] tmp_35_t_mid215_v_fu_431_p3;
wire   [0:0] tmp_35_t_mid2_v_fu_480_p3;
wire   [3:0] k1_mid2_fu_468_p3;
wire   [35:0] indvar_flatten_op_fu_519_p2;
wire    ap_CS_fsm_state4;
reg   [3:0] ap_NS_fsm;
wire   [67:0] bound7_fu_375_p00;
wire   [67:0] bound7_fu_375_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (exitcond_flatten2_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i1_reg_213 <= tmp_31_t_mid2_v_v_fu_410_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i1_reg_213 <= m_cast1_fu_362_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (exitcond_flatten2_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        indvar_flatten2_reg_202 <= indvar_flatten_next2_fu_386_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten2_reg_202 <= 68'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (exitcond_flatten2_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        indvar_flatten_reg_222 <= indvar_flatten_next_fu_525_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_222 <= 36'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (exitcond_flatten2_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j1_reg_233 <= j1_mid2_fu_493_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j1_reg_233 <= c_cast2_fu_359_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (exitcond_flatten2_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k1_reg_242 <= k1_1_fu_513_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        k1_reg_242 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound7_reg_576 <= bound7_fu_375_p2;
        c_cast2_reg_565[8 : 0] <= c_cast2_fu_359_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_554 <= bound_fu_329_p2;
        tmp_11_reg_560 <= tmp_11_fu_353_p2;
        tmp_29_reg_543 <= tmp_29_fu_267_p1;
        tmp_30_reg_548 <= tmp_30_fu_271_p1;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        W_BRAM_0_0_ce0 = 1'b1;
    end else begin
        W_BRAM_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (tmp_35_t_mid2_fu_488_p2 == 1'd0) & (exitcond_flatten2_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (tmp_31_t_mid2_fu_422_p2 == 2'd0))) begin
        W_BRAM_0_0_we0 = 1'b1;
    end else begin
        W_BRAM_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        W_BRAM_0_1_ce0 = 1'b1;
    end else begin
        W_BRAM_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (exitcond_flatten2_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (tmp_35_t_mid2_fu_488_p2 == 1'd1) & (tmp_31_t_mid2_fu_422_p2 == 2'd0))) begin
        W_BRAM_0_1_we0 = 1'b1;
    end else begin
        W_BRAM_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        W_BRAM_1_0_ce0 = 1'b1;
    end else begin
        W_BRAM_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (tmp_35_t_mid2_fu_488_p2 == 1'd0) & (exitcond_flatten2_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (tmp_31_t_mid2_fu_422_p2 == 2'd1))) begin
        W_BRAM_1_0_we0 = 1'b1;
    end else begin
        W_BRAM_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        W_BRAM_1_1_ce0 = 1'b1;
    end else begin
        W_BRAM_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (exitcond_flatten2_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (tmp_35_t_mid2_fu_488_p2 == 1'd1) & (tmp_31_t_mid2_fu_422_p2 == 2'd1))) begin
        W_BRAM_1_1_we0 = 1'b1;
    end else begin
        W_BRAM_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        W_BRAM_2_0_ce0 = 1'b1;
    end else begin
        W_BRAM_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (tmp_35_t_mid2_fu_488_p2 == 1'd0) & (exitcond_flatten2_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (tmp_31_t_mid2_fu_422_p2 == 2'd2))) begin
        W_BRAM_2_0_we0 = 1'b1;
    end else begin
        W_BRAM_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        W_BRAM_2_1_ce0 = 1'b1;
    end else begin
        W_BRAM_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (exitcond_flatten2_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (tmp_35_t_mid2_fu_488_p2 == 1'd1) & (tmp_31_t_mid2_fu_422_p2 == 2'd2))) begin
        W_BRAM_2_1_we0 = 1'b1;
    end else begin
        W_BRAM_2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        W_BRAM_3_0_ce0 = 1'b1;
    end else begin
        W_BRAM_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (tmp_35_t_mid2_fu_488_p2 == 1'd0) & (exitcond_flatten2_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (tmp_31_t_mid2_fu_422_p2 == 2'd3))) begin
        W_BRAM_3_0_we0 = 1'b1;
    end else begin
        W_BRAM_3_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        W_BRAM_3_1_ce0 = 1'b1;
    end else begin
        W_BRAM_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (exitcond_flatten2_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (tmp_35_t_mid2_fu_488_p2 == 1'd1) & (tmp_31_t_mid2_fu_422_p2 == 2'd3))) begin
        W_BRAM_3_1_we0 = 1'b1;
    end else begin
        W_BRAM_3_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten2_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        fmap_TDATA_blk_n = fmap_TVALID;
    end else begin
        fmap_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (exitcond_flatten2_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        fmap_TREADY = 1'b1;
    end else begin
        fmap_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (exitcond_flatten2_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0)) & (exitcond_flatten2_fu_381_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W_BRAM_0_0_address0 = tmp_2_fu_501_p1;

assign W_BRAM_0_0_d0 = fmap_TDATA;

assign W_BRAM_0_1_address0 = tmp_2_fu_501_p1;

assign W_BRAM_0_1_d0 = fmap_TDATA;

assign W_BRAM_1_0_address0 = tmp_2_fu_501_p1;

assign W_BRAM_1_0_d0 = fmap_TDATA;

assign W_BRAM_1_1_address0 = tmp_2_fu_501_p1;

assign W_BRAM_1_1_d0 = fmap_TDATA;

assign W_BRAM_2_0_address0 = tmp_2_fu_501_p1;

assign W_BRAM_2_0_d0 = fmap_TDATA;

assign W_BRAM_2_1_address0 = tmp_2_fu_501_p1;

assign W_BRAM_2_1_d0 = fmap_TDATA;

assign W_BRAM_3_0_address0 = tmp_2_fu_501_p1;

assign W_BRAM_3_0_d0 = fmap_TDATA;

assign W_BRAM_3_1_address0 = tmp_2_fu_501_p1;

assign W_BRAM_3_1_d0 = fmap_TDATA;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state3 = ((exitcond_flatten2_fu_381_p2 == 1'd0) & (fmap_TVALID == 1'b0));
end

assign bound7_fu_375_p0 = bound7_fu_375_p00;

assign bound7_fu_375_p00 = $unsigned(tmp_25_cast_fu_365_p1);

assign bound7_fu_375_p1 = bound7_fu_375_p10;

assign bound7_fu_375_p10 = bound_reg_554;

assign bound7_fu_375_p2 = (bound7_fu_375_p0 * bound7_fu_375_p1);

assign bound_fu_329_p2 = (cast_fu_309_p1 + p_shl_fu_325_p1);

assign c_cast2_fu_359_p1 = c;

assign cast_fu_309_p1 = $unsigned(tmp_22_cast_fu_305_p1);

assign exitcond_flatten2_fu_381_p2 = ((indvar_flatten2_reg_202 == bound7_reg_576) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_398_p2 = ((indvar_flatten_reg_222 == bound_reg_554) ? 1'b1 : 1'b0);

assign exitcond_fu_444_p2 = ((k1_reg_242 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_mid_fu_450_p2 = (not_exitcond_flatten_fu_438_p2 & exitcond_fu_444_p2);

assign i1_1_fu_392_p2 = (32'd1 + i1_reg_213);

assign indvar_flatten_next2_fu_386_p2 = (indvar_flatten2_reg_202 + 68'd1);

assign indvar_flatten_next_fu_525_p3 = ((exitcond_flatten_fu_398_p2[0:0] === 1'b1) ? 36'd1 : indvar_flatten_op_fu_519_p2);

assign indvar_flatten_op_fu_519_p2 = (indvar_flatten_reg_222 + 36'd1);

assign j1_1_fu_456_p2 = (32'd1 + j1_mid_fu_403_p3);

assign j1_mid2_fu_493_p3 = ((exitcond_mid_fu_450_p2[0:0] === 1'b1) ? j1_1_fu_456_p2 : j1_mid_fu_403_p3);

assign j1_mid_fu_403_p3 = ((exitcond_flatten_fu_398_p2[0:0] === 1'b1) ? c_cast2_reg_565 : j1_reg_233);

assign k1_1_fu_513_p2 = (k1_mid2_fu_468_p3 + 4'd1);

assign k1_mid2_fu_468_p3 = ((tmp_12_fu_462_p2[0:0] === 1'b1) ? 4'd0 : k1_reg_242);

assign m_cast1_fu_362_p1 = m;

assign not_exitcond_flatten_fu_438_p2 = (exitcond_flatten_fu_398_p2 ^ 1'd1);

assign p_shl_fu_325_p1 = $unsigned(tmp_9_fu_321_p1);

assign smax1_cast_fu_295_p1 = smax1_fu_287_p3;

assign smax1_fu_287_p3 = ((tmp_7_fu_281_p2[0:0] === 1'b1) ? tmp_27_fu_253_p1 : tmp_s_fu_275_p2);

assign smax4_cast_fu_349_p1 = smax4_fu_341_p3;

assign smax4_fu_341_p3 = ((tmp_10_fu_335_p2[0:0] === 1'b1) ? tmp_28_fu_257_p1 : tmp_fu_261_p2);

assign tmp_10_fu_335_p2 = ((tmp_28_fu_257_p1 > tmp_fu_261_p2) ? 1'b1 : 1'b0);

assign tmp_11_fu_353_p2 = (smax4_cast_fu_349_p1 - m);

assign tmp_12_fu_462_p2 = (exitcond_mid_fu_450_p2 | exitcond_flatten_fu_398_p2);

assign tmp_22_cast_fu_305_p1 = $signed(tmp_8_fu_299_p2);

assign tmp_25_cast_fu_365_p1 = $signed(tmp_11_reg_560);

assign tmp_27_fu_253_p1 = c[7:0];

assign tmp_28_fu_257_p1 = m[5:0];

assign tmp_29_fu_267_p1 = m[1:0];

assign tmp_2_fu_501_p1 = k1_mid2_fu_468_p3;

assign tmp_30_fu_271_p1 = c[0:0];

assign tmp_31_fu_313_p3 = {{tmp_8_fu_299_p2}, {3'd0}};

assign tmp_31_t_mid2_fu_422_p2 = (tmp_32_fu_418_p1 - tmp_29_reg_543);

assign tmp_31_t_mid2_v_v_fu_410_p3 = ((exitcond_flatten_fu_398_p2[0:0] === 1'b1) ? i1_1_fu_392_p2 : i1_reg_213);

assign tmp_32_fu_418_p1 = tmp_31_t_mid2_v_v_fu_410_p3[1:0];

assign tmp_33_fu_427_p1 = j1_reg_233[0:0];

assign tmp_34_fu_476_p1 = j1_1_fu_456_p2[0:0];

assign tmp_35_t_mid215_v_fu_431_p3 = ((exitcond_flatten_fu_398_p2[0:0] === 1'b1) ? tmp_30_reg_548 : tmp_33_fu_427_p1);

assign tmp_35_t_mid2_fu_488_p2 = (tmp_35_t_mid2_v_fu_480_p3 ^ tmp_30_reg_548);

assign tmp_35_t_mid2_v_fu_480_p3 = ((exitcond_mid_fu_450_p2[0:0] === 1'b1) ? tmp_34_fu_476_p1 : tmp_35_t_mid215_v_fu_431_p3);

assign tmp_7_fu_281_p2 = ((tmp_27_fu_253_p1 > tmp_s_fu_275_p2) ? 1'b1 : 1'b0);

assign tmp_8_fu_299_p2 = (smax1_cast_fu_295_p1 - c);

assign tmp_9_fu_321_p1 = $signed(tmp_31_fu_313_p3);

assign tmp_fu_261_p2 = (6'd4 + tmp_28_fu_257_p1);

assign tmp_s_fu_275_p2 = (8'd2 + tmp_27_fu_253_p1);

always @ (posedge ap_clk) begin
    c_cast2_reg_565[31:9] <= 23'b00000000000000000000000;
end

endmodule //data_transfer_f
